package model.GeneticAlgorithm;

import config.Config;
import controller.Board;
import controller.GameRunner;
import model.algorithm.GeneticAlgorithmAgent;
import utils.FenEvaluator;
import utils.Functions;

import java.util.ArrayList;
import java.util.Arrays;

public class GA {
    private static final int populationSize = 20;
    private static final int amountOfMatchUps = populationSize/2;
    private static final String fileName = "build/classes/java/main/model/GeneticAlgorithm/weights";
    private Population population;
    public static boolean training = false;

    private static final double mutationRate = 0.05;
    private static final int amountOfGenerations = 1000;
    public static final int matchesPerGeneration = 5;



    public GA() {
        //in log copy the last 20 weights to these here in the specific order that they are printed in
        //it was going pretty well then i accidentaly quit my pc like 3 hours in and then it would multithread like 1 generation in every single time
        population = new Population(populationSize);

//        ArrayList<Double> list = new ArrayList<>(Arrays.asList(0.80656264849715, 0.8038854688770021, 0.15385792337045845, 0.34836855478969797, -0.5068522293692705, -0.16465884348056092, -0.7849384327491011, 0.8114816125590101, -0.2778412205401175, 0.9664311860851558, -0.762739047766579, 0.9404073762838039, 0.04616724444778697, 0.4516845720132385, 0.6134453128195672, -0.6970617163244783, -0.7409009489060958, 0.6062231376895599, 0.889076471478472, -0.0499017786836915, 0.576317430599145, 0.30018102796402846, 0.3062720429457857, 0.8032544535346744, 0.9706996925399307));
//        population.getIndividual(0).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.02269351159671751, -0.5323715492875567, 0.17611377183635857, 0.8708362097449309, 0.17076631081379534, 0.3483094147475707, 0.9714053712677042, 0.9278853213224715, 0.5779295428093818, 0.9976084300745058, -0.6745584041751156, -0.45920911361275596, 0.7857460998213386, -0.8431294588017737, 0.46012378478929716, 0.9902479379479034, -0.5184220599464635, 0.763585791448725, 0.9542955763916663, -0.8765335467050864, 0.30306257833684214, 0.7768578081518814, 0.5800346344422996, 0.5286274510284581, 0.665585445157187));
//        population.getIndividual(1).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.7616966302240058, 0.7710178482735761, 0.1511709892030205, 0.34836855478969797, -0.5068522293692705, -0.15740067955220272, 0.9714053712677042, 0.9625981467326887, 0.5723398285489206, 0.9976084300745058, -0.6745584041751156, -0.4620185296053092, 0.7857460998213386, -0.8431294588017737, 0.31556998920280876, 0.0021033599822275566, -0.05383751421224914, 0.9980958232799926, 0.12109366632761298, -0.815671569394409, 0.3072107436655749, 0.7069208508329798, 0.3062720429457857, 0.7902000294881122, 0.9706996925399307));
//        population.getIndividual(2).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(-0.1590958716395907, -0.3530854165346087, -0.5546110436629819, -0.6002873758445155, -0.411002271830774, -0.0964816879388617, -0.7849384327491011, 0.8114816125590101, -0.26414501739442797, 0.9664311860851558, -0.762739047766579, 0.9404073762838039, 0.04616724444778697, 0.4516845720132385, 0.5987727815125823, -0.6970617163244783, -0.7409009489060958, 0.6062231376895599, 0.845375534268346, -0.0499017786836915, 0.5953241432651917, 0.30018102796402846, -0.21379145001542255, 0.1678426245018687, -0.5550677003412505));
//        population.getIndividual(3).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.7999006653771346, 0.8038854688770021, 0.15156780695754368, 0.34836855478969797, -0.5068522293692705, -0.16465884348056092, 0.9714053712677042, 0.9625981467326887, 0.5779295428093818, 0.9976084300745058, -0.6745584041751156, -0.45920911361275596, 0.7857460998213386, -0.8431294588017737, 0.44851178305142536, -0.7315812505443742, -0.016121299922204013, -0.6063294377011135, -0.4139055102120217, -0.3347785324434924, -0.04703655226311643, 0.777077033266923, 0.3062720429457857, 0.8032544535346744, 0.9706996925399307));
//        population.getIndividual(4).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(-0.08037457605628713, 0.40501563207454594, 0.915577765645907, 0.6360199659884422, -0.5900135733546643, 0.0017230014955078587, 0.33431148017202683, 0.4484229699364999, 0.8153059294763256, 0.5782196930735815, -0.014609251634355225, 0.6787406500823634, 0.3388684109730875, -0.3703270109072585, 0.867315657048259, -0.27011201718975375, -0.1985519992623801, 0.4296236181840949, -0.4845159683990725, -0.6831745318383502, 0.9489417916636236, -0.2527218031511165, -0.08044091322566782, 0.007803946626373959, 0.245410112950315));
//        population.getIndividual(5).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.7999006653771346, 0.8038854688770021, 0.15156780695754368, 0.34836855478969797, -0.5068522293692705, -0.16224190589752185, 0.9714053712677042, 0.9625981467326887, 0.5779295428093818, 0.9976084300745058, -0.6745584041751156, -0.45920911361275596, 0.7857460998213386, -0.8431294588017737, 0.46012378478929716, -0.7315812505443742, -0.016121299922204013, -0.6063294377011135, -0.4139055102120217, -0.3347785324434924, -0.04703655226311643, 0.813255741208544, 0.3062720429457857, 0.8032544535346744, 0.9706996925399307));
//        population.getIndividual(6).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(-0.1590958716395907, -0.3530854165346087, -0.5546110436629819, -0.6002873758445155, -0.4194966197739889, -0.0964816879388617, 0.9714053712677042, 0.9625981467326887, 0.5779295428093818, 0.9976084300745058, -0.6569568992570363, -0.45920911361275596, 0.7857460998213386, -0.8431294588017737, 0.46012378478929716, -0.7386708786237958, -0.016121299922204013, -0.6063294377011135, -0.4139055102120217, -0.3347785324434924, -0.04703655226311643, 0.777077033266923, -0.20362597644663308, 0.1678426245018687, -0.5295741338161976));
//        population.getIndividual(7).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.7526861478174033, 0.8038854688770021, 0.15156780695754368, 0.34836855478969797, -0.5068522293692705, -0.15740067955220272, 0.9553247866597301, 0.9625981467326887, 0.5779295428093818, 0.9976084300745058, -0.6745584041751156, -0.4420636161393302, 0.7857460998213386, -0.8431294588017737, 0.31556998920280876, 0.002046967507160602, -0.05383751421224914, 1.0296782266296225, 0.12109366632761298, -0.815671569394409, 0.3072107436655749, 0.7420877185018651, 0.2951764859859084, 0.8011084992573041, 0.9706996925399307));
//        population.getIndividual(8).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.02269351159671751, -0.5323715492875567, 0.18159097447790476, 0.8708362097449309, 0.17076631081379534, 0.3483094147475707, 0.0772098821494831, 0.9625981467326887, 0.5723398285489206, 0.5705076959616422, -0.1606346825766541, 0.3657269082384096, 0.30255844709304003, -0.7061876516417636, 0.15479731990650292, 0.9902479379479034, -0.5184220599464635, 0.763585791448725, 0.9542955763916663, -0.8380592657258168, 0.30306257833684214, 0.7768578081518814, 0.5800346344422996, 0.5286274510284581, 0.6493219987332));
//        population.getIndividual(9).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(-0.6691590730106702, -0.4369301823082954, -0.703327782491147, 0.02247205751600112, -0.5691361100753796, 0.177827243515436, 0.06776049720849553, 0.4610266549766546, 0.8620124906052555, -0.9850529395989693, 0.9541615453113398, 0.4316040274348354, 0.7025221910765642, -0.5162971029163232, -0.5547243042134307, 0.5129869491583381, -0.769670026097589, 0.9971875409110793, -0.8546001088087953, -0.15004753734396487, -0.9341408088865002, -0.6368888087539273, 0.33398267419003846, -0.7158428765354714, -0.7377615702626805));
//        population.getIndividual(10).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.7999006653771346, 0.8038854688770021, 0.15156780695754368, 0.34836855478969797, -0.5201753205610917, -0.15740067955220272, 0.9714053712677042, 0.9625981467326887, 0.5791401745195396, 0.9976084300745058, -0.6745584041751156, -0.45920911361275596, 0.7857460998213386, -0.8431294588017737, 0.46012378478929716, -0.7315812505443742, -0.016121299922204013, -0.6063294377011135, -0.4139055102120217, -0.3347785324434924, -0.04703655226311643, 0.777077033266923, 0.3062720429457857, 0.8032544535346744, 0.9706996925399307));
//        population.getIndividual(11).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.02269351159671751, -0.5323715492875567, 0.17611377183635857, 0.8708362097449309, 0.17076631081379534, 0.3483094147475707, 0.0772098821494831, -0.08611344843271707, -0.44344870129526415, 0.5705076959616422, -0.1606346825766541, 0.3657269082384096, 0.30255844709304003, -0.7061876516417636, 0.15479731990650292, 0.9902479379479034, -0.5235443061187848, 0.763585791448725, 0.9542955763916663, -0.8380592657258168, 0.30306257833684214, 0.7768578081518814, 0.5800346344422996, 0.5286274510284581, 0.665585445157187));
//        population.getIndividual(12).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.7757089905785124, 0.8038854688770021, 0.1511709892030205, 0.34836855478969797, -0.5068522293692705, -0.16429191155734985, 0.9714053712677042, 0.952237692386945, 0.5723398285489206, 0.9976084300745058, -0.6745584041751156, -0.4620185296053092, 0.8036149370326351, -0.8431294588017737, 0.31556998920280876, 0.002105062029621289, -0.05383751421224914, 0.9980958232799926, 0.12109366632761298, -0.815671569394409, 0.3072107436655749, 0.7069208508329798, 0.3190571154577325, 0.8032544535346744, 0.9886681424801989));
//        population.getIndividual(13).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.7757089905785124, 0.7439457506801124, 0.1511709892030205, 0.34836855478969797, -0.5068522293692705, -0.15740067955220272, 0.9714053712677042, 0.9625981467326887, 0.5723398285489206, 0.9976084300745058, -0.6745584041751156, -0.45920911361275596, 0.7857460998213386, -0.8431294588017737, 0.31556998920280876, 0.0021033599822275566, -0.05383751421224914, 0.9980958232799926, 0.12109366632761298, -0.853130669157736, 0.3072107436655749, 0.7069208508329798, 0.3062720429457857, 0.8032544535346744, 0.9706996925399307));
//        population.getIndividual(14).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.02269351159671751, -0.5323715492875567, 0.17611377183635857, 0.8708362097449309, 0.17076631081379534, 0.3483094147475707, 0.9714053712677042, 0.9625981467326887, 0.5815230934431636, 0.9842155901777455, -0.6745584041751156, -0.4620185296053092, 0.7857460998213386, -0.8431294588017737, 0.46012378478929716, 0.9902479379479034, -0.5184220599464635, 0.763585791448725, 0.9542955763916663, -0.8380592657258168, 0.30306257833684214, 0.7768578081518814, 0.5800346344422996, 0.5286274510284581, 0.665585445157187));
//        population.getIndividual(15).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.02269351159671751, -0.5323715492875567, 0.17611377183635857, 0.8708362097449309, 0.17076631081379534, -0.16465884348056092, 0.9714053712677042, 0.9625981467326887, 0.5779295428093818, 0.9976084300745058, -0.6745584041751156, -0.45920911361275596, 0.7857460998213386, -0.8294857121942572, 0.46012378478929716, 0.9902479379479034, -0.5287459524077258, 0.763585791448725, 0.9542955763916663, -0.8031184709218191, 0.30306257833684214, 0.7768578081518814, 0.5800346344422996, 0.5286274510284581, 0.665585445157187 ));
//        population.getIndividual(16).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.80656264849715, 0.8038854688770021, 0.15156780695754368, 0.34836855478969797, -0.5068522293692705, 0.3483094147475707, -0.7849384327491011, 0.8114816125590101, -0.2778412205401175, 0.9664311860851558, -0.762739047766579, 0.9404073762838039, 0.047527695817774614, 0.4516845720132385, 0.6134453128195672, -0.6970617163244783, -0.7409009489060958, 0.6062231376895599, 0.889076471478472, -0.0499017786836915, 0.5953241432651917, 0.30018102796402846, 0.3062720429457857, 0.8032544535346744, 0.9706996925399307));
//        population.getIndividual(17).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.7757089905785124, 0.7710178482735761, 0.1511709892030205, 0.34836855478969797, 0.17076631081379534, 0.3483094147475707, 0.9714053712677042, 0.9625981467326887, 0.5779295428093818, 0.9976084300745058, -0.6745584041751156, -0.4620185296053092, 0.7857460998213386, -0.8431294588017737, 0.31556998920280876, 0.0021033599822275566, -0.05383751421224914, 0.9980958232799926, 0.1249143941030384, -0.815671569394409, 0.3165222358889745, 0.7069208508329798, 0.3062720429457857, 0.8032544535346744, 0.9706996925399307));
//        population.getIndividual(18).getAgent().setWeights(list);
//
//        list = new ArrayList<>(Arrays.asList(0.02269351159671751, -0.5323715492875567, 0.17611377183635857, 0.8708362097449309, -0.5068522293692705, -0.15740067955220272, 0.9714053712677042, 0.9625981467326887, 0.5723398285489206, 0.9976084300745058, -0.6745584041751156, -0.45920911361275596, 0.7857460998213386, -0.8431294588017737, 0.46012378478929716, 0.9902479379479034, -0.5184220599464635, 0.763585791448725, 0.9745524360965679, -0.8380592657258168, 0.30306257833684214, 0.7768578081518814, 0.5800346344422996, 0.5286274510284581, 0.665585445157187));
//        population.getIndividual(19).getAgent().setWeights(list);

        train();
        }

    private void train() {
        int index = 0;
        while(index<amountOfGenerations){
            System.out.println("Generation: "+index);
            runGames();
            population.updateGeneration();
            if(Config.DEBUG){
                population.print();
            }
            population.storeWeights();
            index++;
        }
    }

    private void runGames() {
        Board board = new Board();
        GameRunner gameRunner = new GameRunner(board);
        population.resetStatistics();
        int index = 0;
        while(index< matchesPerGeneration){
            System.out.println("Matchup: "+index);
            int[][] matchups = createRandomMatching();

            runMatchup(board, gameRunner, index, matchups);
            index++;
        }
    }

    /**
     * this runs ONE WHOLE SET of mathchups, there are matchesPerGeneration numbers of matchups per generation
     * @param board
     * @param gameRunner
     * @param index
     * @param matchups
     * @return
     */
    private void runMatchup(Board board, GameRunner gameRunner, int index, int[][] matchups) {
        for(int i = 0; i< matchups.length; i++){
            System.out.println("game: "+i);
            GeneticAlgorithmAgent agent1 = population.getIndividual(matchups[i][0]).getAgent();
            GeneticAlgorithmAgent agent2 = population.getIndividual(matchups[i][1]).getAgent();

            gameRunner.GATraining(agent1, agent2);

            handleThread();
            updateGamesPlayedAndWins(board, matchups, i);
            gameRunner.GAReset();
        }
    }

    private void handleThread() {
        training = true;

        while(training){
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void updateGamesPlayedAndWins(Board board, int[][] matchups, int i) {
        population.getIndividual(matchups[i][0]).incrementGamesPlayed();
        population.getIndividual(matchups[i][1]).incrementGamesPlayed();

        if(!board.containsKing(true)){
            population.getIndividual(matchups[i][0]).incrementGamesWon();
        }
        else if(!board.containsKing(false)){
            population.getIndividual(matchups[i][1]).incrementGamesWon();
        }
    }

    /**
     * Creates a random matchup between the agents so that each agent plays another one
     * @return an INTEGER array containing the indices of the agent in the individuals list - NOT the agents itself
     */
    private int[][] createRandomMatching(){
        ArrayList<Integer> arr = new ArrayList<>();
        for(int i=0; i<populationSize; i++){
            arr.add(i);
        }
        
        int[][] matchups = new int[amountOfMatchUps][2];
        
        for(int i=0; i<amountOfMatchUps; i++){
            for(int j=0; j<2; j++){
                int r = (int) Functions.randomNumber(0,arr.size()-1);
                matchups[i][j] = arr.get(r);
                arr.remove(r);
            }
            
        }

        return matchups;
    }

    public static double getMutationRate() {
        return mutationRate;
    }

    public static String getFileName(){
        return fileName;
    }
}
